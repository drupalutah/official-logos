%!PS-Adobe-3.0 %%Creator: Adobe Illustrator(R) 8.0%%AI8_CreatorVersion: 15.0.2%%For: (Derek Walker) ()%%Title: (dcu_logo.ai)%%CreationDate: 6/25/14 10:21 PM%%Canvassize: 16383%%BoundingBox: 78 165 545 689%%HiResBoundingBox: 78.4922 165.2051 544.4209 688.4312%%DocumentProcessColors: Cyan Magenta Yellow Black%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset Adobe_ColorImage_AI6 1.3 0%%+ procset Adobe_Illustrator_AI5 1.3 0%%+ procset Adobe_cshow 2.0 8%%+ procset Adobe_shading_AI8 1.0 0%AI5_FileFormat 4.0%AI3_ColorUsage: Color%AI7_ImageSettings: 0%%CMYKProcessColor: 1 1 1 1 ([Registration])%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) %%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 -1 -1 () %AI3_TemplateBox: 306.5 395.5 306.5 395.5%AI3_TileBox: 18 40 594 774%AI3_DocumentPreview: None%AI5_ArtSize: 612 792%AI5_RulerUnits: 0%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI8_OpenToView: -1281 1366 1 3188 1927 26 0 0 43 154 0 0%AI5_OpenViewLayers: 7%%PageOrigin:126 144%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9%AI9_Flatten: 1%AI12_CMSettings: 00.MS%AI7_Thumbnail: 116 128 8%%BeginData: 12430 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD15FF53A9FD72FF5329FD71FFAF282F53FD70FF532928292FFD6E%FFA8532953292F53FD6CFFA8532829282F282929A8FD69FF7E2F282F292F%282F292F287EA8FD65FFA953292829282F2829282F2829282F53A8FD61FF%A97E292F292F2953292F292F292F2953292F295AA8FD5EFF532F2829282F%28292829537E282F2829282F2829282F53A9FD5AFF7E2929282F292F282F%292F2FFFFF7E282F292F282F292F282F297EFD57FFA85328292829282F28%29282928A9FFFFFF53282F2829282F282928292853A8FD54FFA853282F29%2F2953292F292F29A9FFFFA8FFFF53292F2953292F2953292F2853A9FD52%FFA82F2829282F2829282F2829287EFFFF7E7EFFFFA82F2829282F282928%2F28292853A8FD50FFA82F282F292F282F292F282F287EFFFFFF7E29FFFF%FF7E2F292F282F292F282F292F2853FD4FFFA8532829282F2829282F2829%2853FD04FF28297DFFFFFF53292829282F2829282F28292853FD4EFF5429%2F2953292F2953292F2853FD04FF7E2F2854FD04FF532F2953292F295329%2F2953297EFD4CFF7E282F2829282F2829282F28297EFFFFFFA853282928%7EFD04FF2F29282F2829282F2829282F28A8FD4BFF292F282F292F282F29%2F282F7EFD04FF7E282F292F29FD05FF2F2F282F292F282F292F282F53FD%4AFF53292829282F2829282F282953FD04FF7E2829282F282953FD04FFA8%2829282F2829282F282928297EFD48FFA82F292F2953292F2953292F53FD%04FFA9292F2953292F292F53FD04FF7E282F292F2953292F29532953FD48%FF7E282F2829282F282928292FFD04FF7E282F2829282F282928292FFD04%FF7E282F2829282F2829282F28A8FD47FF2F2F282F292F282F292F29FD05%FF5329282F292F282F292F2853A9FD04FF53282F292F282F292F282F53FD%46FF7E292829282F2829282F28A8FD05FFA82829282F2829282F282953FD%05FFA92F282F2829282F28290653A9FD45FF7E292F2953292F292F297EFD%06FFA9532953292F2953292F28A8FD06FFA853292F2953292F292F29A9FD%45FF532F2829282F2829287EFD07FFA92929282F2829282F28297EFD07FF%7E2F2829282F282928297EFD45FF53282F292F295329537EFD07FFA82F29%2F282F292F282F287EFD08FF532F2953282F292F287EFD45FF2829282F28%2F282F2853FD08FF537E537E537E537E537E7EFD07FF7E2928532929282F%282953FD45FF2F2953292F2953292F2FA87E7E7EA87E7E7EA97EA87EA87E%A87EA87EA87EA87E7E7EA87E7E282F292F2953292F2853FD45FF2829282F%2829282F282928292829282F2829282F282928292829282F2829282F2829%2829282F282F2829282F28292FFD45FF2F292F282F292F282F29532F5353%2F282F292F282F292F2F5A532F282F292F282F292F292F292F282F292F28%2F2953FD45FF282F2829282F2829282FA8FFA8FFA97E282F28290653A8FF%A8FF532953FF282928292FFF28292829282F282928292FFD45FF53292F29%53292F292F29FF7E532F7EFFA8292F2953FFFF2F535353287EFF53295329%53FF53292F2953292F29532953FD45FF2F2F2829282F2829282FA87E282F%2853FF5328297DFF2829282F282953FF2929282F2FFF292F2829282F2829%282953FD45FF7E282F292F282F292F28FF7D2F282F29FF7E2F29FF532F29%2F282F295AFF53292F2853FF53282F292F282F292F287EFD45FF7E29282F%2829282F2829A87E282928297EA82853FF53062F2829282953FF28292829%29FF2929282F2829282F28297EFD46FF292F292F2953292F29FF7E2F2953%297EA92F53FF2F2F292F2953295AFF53292F2853FF532853292F2953292F%29FD47FF53282F2829282F2829A87E2829282953FF2853A92F282F282928%2953FF282F28292FFF2F29282F2829282F2853FD47FF7E2F282F292F282F%29FF532F292F287EA92F53FF2F2F282F292F287EFF53282F2953FF53292F%282F292F282F7EFD48FF2929282F2829282FA87E282F28297DA92853FF53%2829282F282953FF282928292FFF28292829282F282928FD49FFA8282F29%2F292F29FF7D2F292F28A97E2F2FFF532F2953292F287EFF5329532953FF%53292F2953292F28A8FD4AFF53282F2829282FA87E282F2853FF532829A8%A82829282F28292FFF2F29282953FF282F2829282F2853FD4BFFA92F282F%292F28FF59292853A9A9282F297EFF7E29292853292FFFA9292928A9A82F%282F292F282FA8FD4CFF7E29062F2829A8FF7EA8A9A92829282F287EFFA9%7DA87D2F2853FFFF7EA9A8532829282F282953FD4EFF7E2F292F297E7EA8%7E7E292F2953292F297E7EA97E53292F28537EA97E53292F2953292F53FD%50FF5329282928292829282F2829282F282928292829282F282928292829%282F2829282953FD52FF7E2F292F282F292F282F292F282F292F282F292F%282F292F282F292F282F292953FD54FF7E2F2829282F2829282F2829282F%2829282F2829282F2829282F2829062953FD56FFA95A282F292F2953292F%2953292F2953292F2953292F2953292F2853A8FD59FFA829292829282F28%29282F2829282F2829282F28292829297EA9FD5CFF7E54292F282F292F28%2F292F282F292F282F29537DFD61FFA97D53282F282928292829062F2853%53A8FD67FFA8A8FD057EA8A8FDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFF%FDFCFFFDFCFFFDFCFFFDFCFFFD8DFF7DA8FD43FFA8FD2EFF2752FD43FFA8%7DFD2CFFA827F87DFD42FF7D7D7DFD2BFFA8F8F8F87DFD41FF7D527DA8FD%2AFF27FD04F87DFD3FFFA8527D527D7DFD28FF5227F827F827F87DFD3EFF%537D527D527D7DFD26FF52FD08F84BA8FD3AFFA8527D527D527D527D7DFD%23FFA827F8F827F827F805F827F82752FD38FFA8527D527D527D527D527D%52A8A8FD1EFFA852FD0FF8527DFD33FF7D7D527D527D527D527D527D527D%527D7DA8FD1BFF5227F827F827F827F82727F8F827F827F827F82727A8FD%2FFFA87D7D527D7D7D527D7D7D527D7D7D527D537D52A2A8FD17FF7DFD0A%F852FFFD0BF852FD2CFFA87D527D527D527D527D52A8FF7D527D527D527D%527D527D7DFD14FFA827F827F805F827F805F8F852FFFFA8F8F8F827F805%F827F8F8F827A8FD29FF7D7D527D527D527D527D527DFFFFFF7D527D527D%527D527D527D7DA8FD11FF52FD0BF827FD04FF7DFD0CF852FD26FFA85252%527D527D527D527D527DFFFFA8FFA87D527D527D527D527D527D52A8FD0F%FF5227F827F827F827F827F8F827FFFFA852FFFF52F827F827F827F827F8%27F8F852FD25FF597D527D7D7D527D7D7D527DA8FFFFA8FFFFA87D537D52%7D7D7D527D7D7D52A8FD0DFF27FD0CF8A8FFFF5227FFFFFF27FD0CF852FD%22FFA8527D527D527D527D527D527DA8FFFFA852FFFFFF7D7D527D527D52%7D527D527D52A2FD0BFF52F8F805F827F805F827F8F8F87DFFFFFF27F8A8%FFFFFF27F827F805F827F805F827F8F87DFD20FFCA527D527D527D527D52%7D527DA8FFFFFF7D7DA8FFFFFF7D7D527D527D527D527D527D52A8FD09FF%52FD0CF852FFFFFFA8F8F827FFA8FF7DFD0DF87DFD1EFFCB527D527D527D%527D527D52527DFFFFFFA87D527DFD04FF527D527D527D527D527D527D52%A8FD07FFA827F827F827F827F827F827F852FD04FF2727F827A8FFFFFF7D%27F827F827F827F827F827F827FD1EFFFD047D527D7D7D52FD047DFD04FF%A8527D52FD05FF7D7D527D7D7D527D7D7D527D7DFD07FF27FD0BF827FD04%FF7DFD04F852FD04FF52FD0CF852FD1CFF7D52527D527D527D527D527D52%FD05FF527D527D7DFD04FFA8527D527D527D527D527D527D7DFD05FF7DF8%27F805F827F805F827F827A8FFFFFFA827F805F827F87DFD04FF27F8F805%F827F805F827F8F8F8FD1BFFA87D527D527D527D527D527D52FD05FF7D7D%527D527D7DFD04FFA8527D527D527D527D527D527DA8FD04FF27FD0BF87D%FFA8FFFF27FD07F8A8FD04FFFD0CF827FD1AFF7D527D527D527D527D527D%52A8FD04FF7D7D527D527D527DA8FD04FF7D527D527D527D527D527D527D%FFFFFF7DF8F827F827F827F827F82752FFFFFFA852F827F827F827F8F8F8%A8FFFFFFA8F8F8F827F827F827F827F827A8FD19FF527D7D7D527D7D7D52%7D52A8FD04FF7D7D537D527D7D7D527DA8FD04FF7D527D7D7D527D7D7D52%7D52FFFFFF27FD0AF827FD04FF27FD0BF8A8FFFFFF7DFD0BF852FD18FF7D%52527D527D527D527D527DFD04FF7D52527D527D527D527D527DA8FFFFFF%A87D527D527D527D527D527D7DFFA8F827F805F827F805F8F827FD05FF52%00F805F827F805F827F827FD05FF7DF8F8F827F805F827F8F827FD18FF7D%527D527D527D527D527DFD06FF527D527D527D527D527D7DFD05FFA87D52%7D527D527D527D527DFF52FD0AF8FD06FFA8FD0AF852FD06FF52FD0AF8A1%FD16FFA8527D527D527D527D527DA8FD05FFA87D527D527D527D527D527D%FD06FF7D53527D527D527D527D52A852F827F827F827F800F8A8FD06FFA8%27F827F827F827F827F87DFD07FF27F827F827F827F827F87DFD16FFA87D%7D7D527D597D527DA8FD07FF7D7D527D7D7D52FD047DFD07FF7D7D597D52%7D7D7D527DA827FD08F87DFD07FFA8FD0AF852FD07FFA827FD08F852FD16%FF7D527D527D527D527D7DFD08FF7D527D527D527D527D527DFD08FF7D7D%527D527D527D527D27F805F8272727F84B52FD07FF7DF8F827F827F827F8%27F852FD07FFA12727F827F805F827F852FD16FF7D7D527D52FD047DA8FD%08FF527D7D7D527D7D7D527D7DFD07FFA8FD057D527D527D7DFD07F827F8%27FD08FFA2A87DA8A2A87DA8A2A8A8FD07FF52F8F827FD06F827FD16FF7D%527D527D527D527D52FD09FFA8FFA8FFA8FFA8FFA8FD09FF527D527D527D%527D527D27F827F827F827F827F852275227522752275227522752275227%5227522751275227522727F827F827F827F827F827FD16FF7D7D527D7D7D%527D527D7DA87D7D7DA87D7D7DA87DA87DA87DA27DA87D7D7DA87D7D7DA8%7D7D527D7D7D527D7D7D52FD25F800FD08F827FD16FF7D527D527D527D52%7D5252527D5252527D527D527D5252527D5252527D5259527D527D527D52%7D527D527D527D527D00F827F805F827F800F852527D5252F8F8F827F8F8%F84B767D5227F8272727F805F8272727F827F805F827F805F827FD16FF7D%7D527D527D527D527D7DA8A8A87D7D527D527D527D7DA8A8A87D7D52A87D%7D527D7DA87D7D527D527D527D527D52FD0AF8A8FF527DA8A820FD04F852%FFA852A827F827FFFD04F827FF26FD09F827FD16FF7D527D527D527D527D%52A8FFA8A8FFFF7D527D52527DFFFD04A8527DFF7D527D527DFF7D527D52%7D527D527D527D27F827F827F827F827F8FF52F8F827A8FFF827F852FF52%F8F8F827F852FF27F827F827FF27F827F827F827F827F852FD16FFFD047D%527D7D7D527DA8A8527D53A8FF7D527D7DFFA87D52FD047DFF7D7D527D7D%FFFD047D527D7D7D527D7D27FD09F8A852F8F8F827FF52F8F87D7DFD06F8%27FFFD04F827FF27FD09F827FD16FFA8527D527D527D527D52A8A87D527D%52FF7D7D52A8A87D527D527D527DFF7D527D527DFF7D527D527D527D527D%527D52F805F827F805F827F8A852F8F805F8A87DF8F8FF27F8F827F805F8%52FF27F827F827FF27F805F827F805F827F87DFD16FFA87D527D527D527D%527DA8CA527D527DA8FF527DFFA8527D527D527D7DFF7D7D527D52FF7D7D%527D527D527D527D7D7DFD09F8A852FD04F852A8F827FF27FD06F827FFFD%04F827FFFD0AF87DFD17FF527D527D527D527D52A8A87D527D527DFF7D52%FF7D52527D527D527DFF7D527D527DA87D527D527D527D527D52A8FF27F8%F827F827F827F8A85227F827F876A82727FF2700F827F827F852FF27F827%F827FF27F827F827F827F82727FD18FF7D527D7D7D527D7D7DA8FF527D52%7D7DFF7D7DFFA2527D7D7D527D7DFFFD057DFF7D7D527D7D7D527D527DA8%FF52FD08F8A852FD04F852FFF827A827FD06F827FFFD04F827FFFD09F852%FD18FFA87D527D527D527D52A8A87D527D527DFF7D52FF7D7D527D527D52%7DFF7D527D527DCA7D527D527D527D527D7DFFFF7D27F805F827F800F8FF%52F8F827F852A8F827FF2727F805F827F852FF27F805F827FF27F827F805%F827F8F87DFD19FF7D7D527D527D527DA8A8527D527D7DFF7D7DFFA8527D%527D527D7DFF7D7D527D7DFF7D7D527D527D527D52A8FFFFFF27FD07F8A8%52FD04F87D7DF827FF27FD06F827FFFD04F826FFFD08F827FD1AFFA8527D%527D527D52A8A859527D52A8A87D52FF7D7D527D527D527DFF7D527D527D%FF7D527D527D527D527DA8FFFFFFCAF800F827F827F8FF52F8F827F8FF52%F8F8FF52F8F827F827F852FF27F827F852FF27F827F827F827F8A8FD1BFF%7D527D7D7D527DA8A8527D597DA8FF527DA8FF527D52FD047DFF7D7D527D%7DFFFD047D527D597DA8FD05FF52FD06F8A852F8F8F852FF27F8F87DFFFD%06F827FF27F8F8F852FFFD07F852FD1CFFA87D527D527D52A8A87D527D7D%FF7D7D52A8FF7D527D527D527DA8A8527D527DFF7D527D527D527D7DFD07%FF52F805F827F8FF5227F852FF52F827F827FFA8FD0427F8277DFF272727%FF52F8F805F827F827A8FD1DFF7D7D527D527DA8FF597D7DFFA87D527D7D%FFFFFD057D52A8FFA87D7DA8FF527D527D527D52FD08FFA827FD04F87DFF%A8FFA852FD05F827A8FFA8FF52F8F8277DFFA8FF52FD07F87DFFA8FD1DFF%7D52527D52A8FD04FF7D7D527D527D52A8FFFFFFA8527D52A8FFFFFFA852%7D527D527D52A8FD09FFA827F827F82727522727F827F827F827F8272752%2727F827F827275227F8F827F827F8277DFD21FFFD0A7D527D527D7D7D52%7D7D7D527D7D7D527D7D7D527D7D7D527D52A8FD0BFF7D27FD20F852FD23%FF7D7D527D527D527D527D527D527D527D527D527D527D527D527D527D52%7D527D52A8FD0DFFA827F827F805F827F805F827F805F827F805F827F805%F827F805F827F805F8277DFD25FF7D7D527D527D527D527D527D527D527D%527D527D527D527D527D527D527D52A8FD0DFFA8FFFF52FD1BF8277DFD27%FF7D7D527D527D527D527D527D527D527D527D527D527D527D527D525252%A8FD12FF7D27F8F827F827F827F827F827F827F827F827F827F827F800F8%52FD2AFFA87D527D597D527D7D7D527D7D7D527D7D7D527D7D7D527D527D%7DFD16FF5227FD14F827A8FD2DFFA87D7D527D527D527D527D527D527D52%7D527D5252527DA8FD19FF7D2727F8F8F827F805F827FD05F805277DA8FD%31FFA8A87D7D527D527D527D527D527D527D527D7DFD1EFFA87D5227FD07%F827277D7DFD37FFA8A87D7D527D527D527D527D7DA8FD0FFFFF%%EndData%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog%%BeginSetupuserdict /_useSmoothShade false putuserdict /_aicmykps false putuserdict /_forceToCMYK false putAdobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrintingNp%AI8_PluginGroupInfo(Adobe Tracing Object) (Tracing) (TracingSuite.aip)%AI8_PluginGroupInfo(Adobe Flare Plugin) (Flare) (Flare.aip)%AI8_PluginGroupInfo(Adobe Deform Plugin) (Adobe Envelope Plugin) (Envelope and Warp.aip)%AI8_PluginGroupInfo(Adobe Planar Group) (Adobe Live Paint Plugin) (Live Paint.aip)%AI8_PluginGroupInfo(Adobe Perspective Plugin Group) (Adobe Perspective Plugin Group) (Perspective.aip)%AI8_PluginGroupInfo(Adobe Path Blends) (Adobe Blends Plugin) (LiveBlends.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (CalligBrushTool.aip)%AI8_PluginGroupInfo(Adobe Symbolism) (Adobe Symbolism) (ParticleSystem.aip)%AI8_PluginGroupInfo(Pathfinder Suite) (Adobe Compound Shape) (PathFinderS.aip)%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI5_End_NonPrinting--%AI5_BeginPalette0 0 Pb1 1 1 1 ([Registration]) 0 Xs([Registration])PcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 1 0 79 128 255 0 50 Lb(Layer 1) Ln0 Au0 O0.967803 0.839567 0.130251 0.023102 k0 J 0 j 1 w 10 M []0 d0 XR141.9492 550.1445 m140.9087 552.229 139.4883 553.9189 137.6885 555.2134 c135.8882 556.5063 133.5669 557.1538 130.7266 557.1538 c130.2192 557.1538 129.6738 557.1538 129.0913 557.1538 c128.5078 557.1538 127.937 557.1265 127.3794 557.0742 c126.8203 557.021 126.3008 556.9683 125.8198 556.916 c125.3369 556.8633 124.9448 556.8101 124.6406 556.7583 C124.6406 511.6113 l124.8423 511.5581 125.2114 511.5181 125.7437 511.4932 c126.2759 511.4658 126.8335 511.4395 127.4175 511.4136 c128 511.3862 128.5586 511.3604 129.0913 511.3345 c129.624 511.3071 130.0161 511.2944 130.2705 511.2944 c133.0596 511.2944 135.3931 511.9282 137.27 513.1958 c139.146 514.4634 140.6299 516.166 141.7207 518.3037 c142.811 520.4429 143.585 522.9238 144.0415 525.7495 c144.498 528.5737 144.7261 531.5708 144.7261 534.7393 c144.7261 537.5371 144.5225 540.2832 144.1177 542.9766 c143.7114 545.6689 142.9883 548.0576 141.9492 550.1445 CF*u1 D265.4053 579.8745 m263.7646 591.5884 260.0845 602.6235 254.2427 612.9092 c246.4053 626.709 235.6934 637.8364 222.5947 646.7319 c215.3711 651.6372 207.4146 655.1104 199.5156 658.7012 c191.9868 662.1245 185.0132 666.3008 179.2744 672.4248 c174.5293 677.4878 169.959 682.6938 165.4531 687.9639 c165.29 688.1543 165.1748 688.5127 164.8633 688.4141 c164.5659 688.3198 164.6294 687.9678 164.603 687.709 c164.2939 684.7036 163.7407 681.7461 162.9541 678.8281 c161.2578 672.5293 157.9209 667.3862 152.6255 663.4668 c147.3823 659.5869 141.8784 656.1602 136.0737 653.2036 c132.1631 651.2109 128.2148 649.2808 124.4565 647.0107 c115.5552 641.6338 107.7236 634.978 100.9033 627.1226 c94.0742 619.2583 88.6372 610.5435 84.8042 600.8545 c81.2764 591.9385 79.2598 582.6841 78.6865 573.1045 c78.2646 566.0562 78.5059 559.0474 79.6455 552.0771 c81.2476 542.272 84.353 532.9751 89.0396 524.2041 c94.6021 513.7944 101.9126 504.7983 110.9019 497.1719 c119.2813 490.0635 128.6216 484.5586 138.8828 480.6152 c148.501 476.9185 158.4619 474.7954 168.7422 474.3145 c174.5659 474.042 180.3882 474.2798 186.188 475.0342 c196.4736 476.3701 206.3262 479.1704 215.6816 483.644 c227.1035 489.1055 237.0391 496.5396 245.3022 506.1738 c250.8184 512.606 255.2944 519.6919 258.7114 527.436 c264.0239 539.4775 266.4639 552.1172 266.4126 566.353 c266.4878 570.1587 266.0845 575.0264 265.4053 579.8745 CF0 D104.5903 571.2119 m104.1758 571.1177 104.1587 571.627 104.0635 571.9282 c103.251 574.5073 102.4614 577.0933 101.6265 579.6646 c101.3882 580.3979 101.4395 580.7925 102.3052 580.6187 c103.0957 580.7529 103.4067 580.395 103.5259 579.6597 c103.9312 577.1572 104.394 574.6631 104.813 572.1626 c104.8687 571.8315 105.0649 571.3208 104.5903 571.2119 Cf149.7095 523.73 m149.0249 520.2446 147.8706 517.1821 146.2476 514.542 c144.624 511.9014 142.4814 509.79 139.8193 508.2061 c137.1563 506.6216 133.8203 505.8291 129.814 505.8291 c129.1543 505.8291 128.3174 505.8433 127.3032 505.8691 c126.2881 505.8965 125.2358 505.9487 124.146 506.0283 c123.0542 506.1069 122.041 506.1733 121.1025 506.2256 c120.1636 506.2788 119.4404 506.3584 118.9346 506.4639 C118.9346 561.9854 l119.7446 562.144 120.646 562.2627 121.6353 562.3418 c122.6245 562.4204 123.625 562.4727 124.6406 562.5 c125.6543 562.5259 126.6567 562.5518 127.646 562.5791 c128.6348 562.605 129.5596 562.6191 130.4229 562.6191 c134.1245 562.6191 137.27 561.958 139.8569 560.6392 c142.4438 559.3184 144.5483 557.4312 146.1719 554.9751 c147.7944 552.5205 148.9604 549.5762 149.6719 546.1445 c150.3813 542.7114 150.7368 538.8838 150.7368 534.6602 c150.7368 530.8584 150.3945 527.2144 149.7095 523.73 Cf181.9302 506.3047 m180.002 505.8291 177.9736 505.5923 175.8438 505.5923 c173.1543 505.5923 170.6699 506.1206 168.3877 507.1763 c166.105 508.2319 164.1387 509.9092 162.4912 512.2061 c160.8423 514.5024 159.562 517.4731 158.6489 521.1162 c157.7358 524.7593 157.2798 529.1416 157.2798 534.2637 c157.2798 539.5435 157.7993 544.0059 158.8394 547.6494 c159.8779 551.293 161.2607 554.2495 162.9858 556.52 c164.7095 558.79 166.7007 560.4272 168.958 561.4312 c171.2144 562.4331 173.5352 562.936 175.9204 562.936 c178.3545 562.936 180.3706 562.7505 181.9683 562.3813 c183.5664 562.0117 184.9473 561.5625 186.1143 561.0347 C184.7456 555.6494 l183.73 556.2295 182.5396 556.6782 181.1689 556.9951 c179.7998 557.3125 178.2275 557.4707 176.4526 557.4707 c174.6768 557.4707 173.0029 557.061 171.4307 556.2432 c169.8579 555.4238 168.4639 554.1045 167.2461 552.2832 c166.0288 550.4609 165.0649 548.0718 164.3555 545.1143 c163.644 542.1567 163.2896 538.5415 163.2896 534.2637 c163.2896 526.5537 164.5571 520.7593 167.0947 516.8789 c169.6299 512.998 173.0029 511.0571 177.2129 511.0571 c178.937 511.0571 180.4844 511.3071 181.8545 511.8096 c183.2241 512.311 184.3901 512.9048 185.3545 513.5913 C186.7231 508.6816 l185.4551 507.5723 183.8579 506.7803 181.9302 506.3047 Cf223.6235 524.8389 m223.6235 518.1323 222.3677 513.2866 219.8569 510.3047 c217.3467 507.3213 213.7822 505.8291 209.1675 505.8291 c203.79 505.8291 199.8726 507.2817 197.4131 510.186 c194.9517 513.0894 193.7227 517.5522 193.7227 523.5718 C193.7227 561.9854 L199.4287 561.9854 L199.4287 526.6606 l199.4287 523.8096 199.6064 521.4053 199.9614 519.4531 c200.3159 517.498 200.8999 515.9146 201.7114 514.7007 c202.5225 513.4854 203.5376 512.6143 204.7549 512.0864 c205.9727 511.5581 207.4673 511.2944 209.2437 511.2944 c212.5908 511.2944 214.9116 512.5088 216.2056 514.939 c217.4985 517.3657 218.1455 521.2744 218.1455 526.6606 C218.1455 561.9854 L223.6235 561.9854 L223.6235 524.8389 Lf224.4727 571.0474 m189.1128 571.0469 153.7524 571.0469 118.3926 571.0474 c116.9487 571.0474 116.9473 571.0518 116.9512 572.4985 c116.957 574.6099 116.9736 576.7217 116.9658 578.8335 c116.9648 579.0474 117.0166 579.2969 116.9844 579.5142 c116.959 579.6816 116.8848 579.8311 116.689 579.9268 c116.1787 580.1768 115.8096 579.7788 115.4521 579.48 c113.7354 578.0479 112.02 576.6143 110.3037 575.1807 c109.1406 574.2085 107.9775 573.2368 106.814 572.2651 c106.7793 572.2363 106.7417 572.2114 106.6992 572.1914 c106.6289 572.1572 106.5439 572.1392 106.4165 572.1631 c106.4937 572.2603 106.5698 572.3584 106.647 572.4561 c108.6953 575.0635 110.4971 577.9429 112.9185 580.1392 c117.4712 584.2695 120.7949 589.3584 124.6206 594.0449 c134.6211 606.2939 144.4468 618.6865 154.3394 631.0234 c159.8096 637.8452 165.2759 644.6714 170.7417 651.4971 c171.6069 652.5781 171.6133 652.5918 172.5107 651.4727 c180.7271 641.2266 188.9375 630.9761 197.1523 620.7295 c206.541 609.0186 215.9331 597.3096 225.3232 585.6006 c226.5181 584.1108 227.5742 582.4766 228.9385 581.1631 c231.6782 578.5244 233.7456 575.3486 236.2129 572.4985 c236.2402 572.4663 236.2656 572.4326 236.2905 572.3994 c236.3447 572.3281 236.3975 572.2554 236.4517 572.1836 c236.418 572.1377 236.3853 572.0918 236.3516 572.0464 c236.3164 572.0757 236.2808 572.105 236.2451 572.1348 c234.9268 573.2329 233.6089 574.3311 232.2905 575.4292 c230.7422 576.7192 229.1934 578.0088 227.6455 579.2988 c227.5161 579.4058 227.3975 579.5254 227.2666 579.6299 c226.9736 579.8638 226.6553 580.104 226.2651 579.9634 c226.0337 579.8799 225.9497 579.7246 225.9238 579.5469 c225.8975 579.373 225.9263 579.1777 225.9263 579.0054 c225.9229 576.8608 225.9365 574.7158 225.9429 572.5703 c225.9478 571.0503 225.9468 571.0474 224.4727 571.0474 Cf241.1953 579.4673 m240.396 576.9189 239.6016 574.3696 238.8018 571.8223 c238.7153 571.5479 238.6904 571.1602 238.2886 571.2002 c237.9873 571.23 238.0532 571.5503 238.0176 571.8066 c238.3804 573.915 238.7466 576.0527 239.1167 578.189 c239.208 578.7202 239.3237 579.2476 239.4028 579.7793 c239.4072 579.8076 239.4126 579.8354 239.416 579.8638 c239.4326 579.9795 239.459 580.0796 239.4946 580.168 c239.6162 580.4688 239.856 580.6152 240.2661 580.6445 c241.4731 580.7305 241.561 580.6348 241.1953 579.4673 Cf*U195.207 600.1294 m191.647 601.8027 188.8647 604.4341 186.4053 607.4316 c180.8599 614.188 176.9619 621.8521 174.0361 630.0439 c173.1162 632.6187 172.3574 635.2422 171.7534 638.0444 c171.5737 637.8809 171.5044 637.8477 171.4888 637.7979 c171.4194 637.5811 171.3604 637.3604 171.3066 637.1392 c168.7388 626.542 164.2349 616.8555 157.5239 608.2485 c155.0103 605.0244 152.1445 602.1245 148.4043 600.2617 c147.2979 599.7109 147.291 599.7017 147.9253 598.6382 c150.3994 594.4912 151.0327 589.9082 151.0576 585.1982 c151.0713 582.5874 150.5645 580.0381 149.9648 577.5024 c149.6099 576.0029 149.667 575.9873 151.228 575.9863 c164.7212 575.9858 178.2139 575.9858 191.7065 575.9863 c191.9678 575.9863 192.2285 575.9927 192.4888 575.9961 c193.0444 576.0049 193.2495 576.2827 193.1274 576.8198 c192.6479 578.9229 192.4814 581.0615 192.3403 583.209 c191.9771 588.751 192.644 594.0757 195.5454 598.9414 c195.9023 599.5405 195.8428 599.8301 195.207 600.1294 CFUu0 0 0 0 k419.9492 550.1445 m418.9082 552.229 417.4883 553.9189 415.6885 555.2134 c413.8887 556.5063 411.5664 557.1538 408.7266 557.1538 c408.2188 557.1538 407.6738 557.1538 407.0918 557.1538 c406.5078 557.1538 405.9375 557.1265 405.3789 557.0742 c404.8203 557.021 404.3008 556.9683 403.8203 556.916 c403.3369 556.8633 402.9453 556.8101 402.6406 556.7583 C402.6406 511.6113 l402.8418 511.5581 403.2109 511.5181 403.7441 511.4932 c404.2754 511.4658 404.834 511.4395 405.418 511.4136 c406 511.3862 406.5586 511.3604 407.0918 511.3345 c407.624 511.3071 408.0156 511.2944 408.2705 511.2944 c411.0596 511.2944 413.3926 511.9282 415.2695 513.1958 c417.1465 514.4634 418.6299 516.166 419.7207 518.3037 c420.8105 520.4429 421.585 522.9238 422.041 525.7495 c422.498 528.5737 422.7266 531.5708 422.7266 534.7393 c422.7266 537.5371 422.5225 540.2832 422.1172 542.9766 c421.7109 545.6689 420.9883 548.0576 419.9492 550.1445 CF*u1 D543.4053 579.8745 m541.7646 591.5884 538.084 602.6235 532.2422 612.9092 c524.4053 626.709 513.6934 637.8364 500.5947 646.7319 c493.3711 651.6372 485.4141 655.1104 477.5156 658.7012 c469.9863 662.1245 463.0137 666.3008 457.2744 672.4248 c452.5293 677.4878 447.959 682.6938 443.4531 687.9639 c443.29 688.1543 443.1748 688.5127 442.8633 688.4141 c442.5664 688.3198 442.6289 687.9678 442.6035 687.709 c442.2939 684.7036 441.7402 681.7461 440.9541 678.8281 c439.2578 672.5293 435.9209 667.3862 430.625 663.4668 c425.3828 659.5869 419.8789 656.1602 414.0742 653.2036 c410.1631 651.2109 406.2148 649.2808 402.457 647.0107 c393.5547 641.6338 385.7236 634.978 378.9033 627.1226 c372.0742 619.2583 366.6367 610.5435 362.8047 600.8545 c359.2764 591.9385 357.2598 582.6841 356.6865 573.1045 c356.2646 566.0562 356.5059 559.0474 357.6455 552.0771 c359.248 542.272 362.3535 532.9751 367.0391 524.2041 c372.6016 513.7944 379.9121 504.7983 388.9023 497.1719 c397.2813 490.0635 406.6211 484.5586 416.8828 480.6152 c426.501 476.9185 436.4619 474.7954 446.7422 474.3145 c452.5664 474.042 458.3887 474.2798 464.1875 475.0342 c474.4736 476.3701 484.3262 479.1704 493.6816 483.644 c505.1035 489.1055 515.0391 496.5396 523.3027 506.1738 c528.8184 512.606 533.2949 519.6919 536.7109 527.436 c542.0234 539.4775 544.4639 552.1172 544.4121 566.353 c544.4883 570.1587 544.084 575.0264 543.4053 579.8745 CF0 D382.5898 571.2119 m382.1758 571.1177 382.1582 571.627 382.0635 571.9282 c381.251 574.5073 380.4609 577.0933 379.627 579.6646 c379.3887 580.3979 379.4395 580.7925 380.3047 580.6187 c381.0957 580.7529 381.4063 580.395 381.5254 579.6597 c381.9316 577.1572 382.3945 574.6631 382.8125 572.1626 c382.8691 571.8315 383.0645 571.3208 382.5898 571.2119 Cf427.709 523.73 m427.0254 520.2446 425.8711 517.1821 424.248 514.542 c422.624 511.9014 420.4814 509.79 417.8193 508.2061 c415.1563 506.6216 411.8203 505.8291 407.8145 505.8291 c407.1543 505.8291 406.3174 505.8433 405.3027 505.8691 c404.2881 505.8965 403.2363 505.9487 402.1465 506.0283 c401.0547 506.1069 400.041 506.1733 399.1025 506.2256 c398.1641 506.2788 397.4404 506.3584 396.9346 506.4639 C396.9346 561.9854 l397.7441 562.144 398.6465 562.2627 399.6348 562.3418 c400.625 562.4204 401.625 562.4727 402.6406 562.5 c403.6543 562.5259 404.6563 562.5518 405.6465 562.5791 c406.6348 562.605 407.5596 562.6191 408.4229 562.6191 c412.125 562.6191 415.2695 561.958 417.8574 560.6392 c420.4434 559.3184 422.5488 557.4312 424.1719 554.9751 c425.7949 552.5205 426.9609 549.5762 427.6719 546.1445 c428.3809 542.7114 428.7363 538.8838 428.7363 534.6602 c428.7363 530.8584 428.3945 527.2144 427.709 523.73 Cf459.9297 506.3047 m458.002 505.8291 455.9736 505.5923 453.8438 505.5923 c451.1543 505.5923 448.6699 506.1206 446.3877 507.1763 c444.1055 508.2319 442.1387 509.9092 440.4912 512.2061 c438.8418 514.5024 437.5625 517.4731 436.6484 521.1162 c435.7363 524.7593 435.2793 529.1416 435.2793 534.2637 c435.2793 539.5435 435.7988 544.0059 436.8398 547.6494 c437.8779 551.293 439.2607 554.2495 440.9863 556.52 c442.709 558.79 444.7012 560.4272 446.958 561.4312 c449.2148 562.4331 451.5352 562.936 453.9199 562.936 c456.3545 562.936 458.3711 562.7505 459.9688 562.3813 c461.5664 562.0117 462.9473 561.5625 464.1143 561.0347 C462.7461 555.6494 l461.7305 556.2295 460.5391 556.6782 459.1689 556.9951 c457.7998 557.3125 456.2275 557.4707 454.4531 557.4707 c452.6768 557.4707 451.0029 557.061 449.4307 556.2432 c447.8574 555.4238 446.4639 554.1045 445.2461 552.2832 c444.0293 550.4609 443.0645 548.0718 442.3555 545.1143 c441.6445 542.1567 441.2891 538.5415 441.2891 534.2637 c441.2891 526.5537 442.5566 520.7593 445.0947 516.8789 c447.6299 512.998 451.0029 511.0571 455.2129 511.0571 c456.9375 511.0571 458.4844 511.3071 459.8545 511.8096 c461.2246 512.311 462.3906 512.9048 463.3545 513.5913 C464.7227 508.6816 l463.4551 507.5723 461.8574 506.7803 459.9297 506.3047 Cf501.623 524.8389 m501.623 518.1323 500.3672 513.2866 497.8574 510.3047 c495.3467 507.3213 491.7822 505.8291 487.168 505.8291 c481.79 505.8291 477.873 507.2817 475.4131 510.186 c472.9512 513.0894 471.7227 517.5522 471.7227 523.5718 C471.7227 561.9854 L477.4287 561.9854 L477.4287 526.6606 l477.4287 523.8096 477.6064 521.4053 477.9609 519.4531 c478.3164 517.498 478.9004 515.9146 479.7109 514.7007 c480.5225 513.4854 481.5371 512.6143 482.7549 512.0864 c483.9727 511.5581 485.4668 511.2944 487.2441 511.2944 c490.5908 511.2944 492.9121 512.5088 494.2051 514.939 c495.498 517.3657 496.1455 521.2744 496.1455 526.6606 C496.1455 561.9854 L501.623 561.9854 L501.623 524.8389 Lf502.4727 571.0474 m467.1133 571.0469 431.752 571.0469 396.3926 571.0474 c394.9492 571.0474 394.9473 571.0518 394.9512 572.4985 c394.957 574.6099 394.9736 576.7217 394.9658 578.8335 c394.9648 579.0474 395.0166 579.2969 394.9844 579.5142 c394.959 579.6816 394.8848 579.8311 394.6895 579.9268 c394.1787 580.1768 393.8096 579.7788 393.4521 579.48 c391.7354 578.0479 390.0195 576.6143 388.3037 575.1807 c387.1406 574.2085 385.9775 573.2368 384.8145 572.2651 c384.7793 572.2363 384.7422 572.2114 384.6992 572.1914 c384.6289 572.1572 384.5439 572.1392 384.416 572.1631 c384.4941 572.2603 384.5703 572.3584 384.6465 572.4561 c386.6953 575.0635 388.4971 577.9429 390.918 580.1392 c395.4707 584.2695 398.7949 589.3584 402.6211 594.0449 c412.6211 606.2939 422.4473 618.6865 432.3398 631.0234 c437.8096 637.8452 443.2754 644.6714 448.7422 651.4971 c449.6074 652.5781 449.6133 652.5918 450.5107 651.4727 c458.7266 641.2266 466.9375 630.9761 475.1523 620.7295 c484.541 609.0186 493.9336 597.3096 503.3232 585.6006 c504.5176 584.1108 505.5742 582.4766 506.9385 581.1631 c509.6777 578.5244 511.7461 575.3486 514.2129 572.4985 c514.2402 572.4663 514.2656 572.4326 514.291 572.3994 c514.3447 572.3281 514.3975 572.2554 514.4512 572.1836 c514.418 572.1377 514.3848 572.0918 514.3516 572.0464 c514.3164 572.0757 514.2813 572.105 514.2451 572.1348 c512.9268 573.2329 511.6094 574.3311 510.291 575.4292 c508.7422 576.7192 507.1934 578.0088 505.6455 579.2988 c505.5156 579.4058 505.3975 579.5254 505.2666 579.6299 c504.9736 579.8638 504.6553 580.104 504.2656 579.9634 c504.0332 579.8799 503.9492 579.7246 503.9238 579.5469 c503.8975 579.373 503.9258 579.1777 503.9258 579.0054 c503.9229 576.8608 503.9365 574.7158 503.9434 572.5703 c503.9473 571.0503 503.9473 571.0474 502.4727 571.0474 Cf519.1953 579.4673 m518.3965 576.9189 517.6016 574.3696 516.8018 571.8223 c516.7148 571.5479 516.6904 571.1602 516.2891 571.2002 c515.9873 571.23 516.0527 571.5503 516.0176 571.8066 c516.3809 573.915 516.7461 576.0527 517.1172 578.189 c517.208 578.7202 517.3242 579.2476 517.4023 579.7793 c517.4072 579.8076 517.4121 579.8354 517.416 579.8638 c517.4326 579.9795 517.459 580.0796 517.4941 580.168 c517.6162 580.4688 517.8555 580.6152 518.2656 580.6445 c519.4727 580.7305 519.5605 580.6348 519.1953 579.4673 Cf*U473.207 600.1294 m469.6465 601.8027 466.8652 604.4341 464.4053 607.4316 c458.8594 614.188 454.9619 621.8521 452.0361 630.0439 c451.1162 632.6187 450.3574 635.2422 449.7539 638.0444 c449.5742 637.8809 449.5039 637.8477 449.4883 637.7979 c449.4199 637.5811 449.3604 637.3604 449.3066 637.1392 c446.7383 626.542 442.2344 616.8555 435.5234 608.2485 c433.0098 605.0244 430.1445 602.1245 426.4043 600.2617 c425.2979 599.7109 425.291 599.7017 425.9258 598.6382 c428.3994 594.4912 429.0332 589.9082 429.0576 585.1982 c429.0713 582.5874 428.5645 580.0381 427.9648 577.5024 c427.6094 576.0029 427.667 575.9873 429.2285 575.9863 c442.7207 575.9858 456.2139 575.9858 469.707 575.9863 c469.9678 575.9863 470.2285 575.9927 470.4883 575.9961 c471.0449 576.0049 471.25 576.2827 471.127 576.8198 c470.6484 578.9229 470.4814 581.0615 470.3398 583.209 c469.9766 588.751 470.6445 594.0757 473.5449 598.9414 c473.9023 599.5405 473.8428 599.8301 473.207 600.1294 CFUu0.75021 0.679683 0.670222 0.90164 k141.9492 241.1445 m140.9087 243.2285 139.4883 244.9189 137.6885 246.2129 c135.8882 247.5059 133.5669 248.1543 130.7266 248.1543 c130.2192 248.1543 129.6738 248.1543 129.0913 248.1543 c128.5078 248.1543 127.937 248.127 127.3794 248.0742 c126.8203 248.0215 126.3008 247.9688 125.8198 247.916 c125.3369 247.8633 124.9448 247.8105 124.6406 247.7578 C124.6406 202.6113 l124.8423 202.5586 125.2114 202.5176 125.7437 202.4932 c126.2759 202.4658 126.8335 202.4395 127.4175 202.4141 c128 202.3867 128.5586 202.3604 129.0913 202.334 c129.624 202.3066 130.0161 202.2949 130.2705 202.2949 c133.0596 202.2949 135.3931 202.9277 137.27 204.1953 c139.146 205.4629 140.6299 207.166 141.7207 209.3037 c142.811 211.4434 143.585 213.9238 144.0415 216.75 c144.498 219.5742 144.7261 222.5703 144.7261 225.7393 c144.7261 228.5371 144.5225 231.2832 144.1177 233.9766 c143.7114 236.6689 142.9883 239.0576 141.9492 241.1445 CF*u1 D265.4053 270.875 m263.7646 282.5879 260.0845 293.623 254.2427 303.9092 c246.4053 317.709 235.6934 328.8359 222.5947 337.7324 c215.3711 342.6367 207.4146 346.1104 199.5156 349.7012 c191.9868 353.125 185.0132 357.3008 179.2744 363.4248 c174.5293 368.4883 169.959 373.6934 165.4531 378.9639 c165.29 379.1543 165.1748 379.5127 164.8633 379.4141 c164.5659 379.3203 164.6294 378.9678 164.603 378.709 c164.2939 375.7031 163.7407 372.7461 162.9541 369.8281 c161.2578 363.5293 157.9209 358.3867 152.6255 354.4668 c147.3823 350.5869 141.8784 347.1602 136.0737 344.2031 c132.1631 342.2109 128.2148 340.2813 124.4565 338.0107 c115.5552 332.6338 107.7236 325.9785 100.9033 318.123 c94.0742 310.2578 88.6372 301.543 84.8042 291.8545 c81.2764 282.9385 79.2598 273.6836 78.6865 264.1045 c78.2646 257.0566 78.5059 250.0469 79.6455 243.0771 c81.2476 233.2715 84.353 223.9746 89.0396 215.2041 c94.6021 204.7949 101.9126 195.7988 110.9019 188.1719 c119.2813 181.0635 128.6216 175.5586 138.8828 171.6152 c148.501 167.918 158.4619 165.7949 168.7422 165.3145 c174.5659 165.042 180.3882 165.2793 186.188 166.0342 c196.4736 167.3701 206.3262 170.1699 215.6816 174.6445 c227.1035 180.1055 237.0391 187.5391 245.3022 197.1738 c250.8184 203.6055 255.2944 210.6914 258.7114 218.4355 c264.0239 230.4775 266.4639 243.1172 266.4126 257.3535 c266.4878 261.1582 266.0845 266.0264 265.4053 270.875 CF0 D104.5903 262.2119 m104.1758 262.1172 104.1587 262.627 104.0635 262.9277 c103.251 265.5078 102.4614 268.0938 101.6265 270.6641 c101.3882 271.3984 101.4395 271.793 102.3052 271.6191 c103.0957 271.7529 103.4067 271.3945 103.5259 270.6602 c103.9312 268.1572 104.394 265.6631 104.813 263.1621 c104.8687 262.832 105.0649 262.3203 104.5903 262.2119 Cf149.7095 214.7305 m149.0249 211.2441 147.8706 208.1816 146.2476 205.542 c144.624 202.9014 142.4814 200.79 139.8193 199.2061 c137.1563 197.6211 133.8203 196.8291 129.814 196.8291 c129.1543 196.8291 128.3174 196.8438 127.3032 196.8691 c126.2881 196.8965 125.2358 196.9492 124.146 197.0283 c123.0542 197.1074 122.041 197.1738 121.1025 197.2256 c120.1636 197.2793 119.4404 197.3584 118.9346 197.4639 C118.9346 252.9854 l119.7446 253.1445 120.646 253.2627 121.6353 253.3418 c122.6245 253.4199 123.625 253.4727 124.6406 253.5 c125.6543 253.5254 126.6567 253.5518 127.646 253.5791 c128.6348 253.6055 129.5596 253.6191 130.4229 253.6191 c134.1245 253.6191 137.27 252.958 139.8569 251.6387 c142.4438 250.3184 144.5483 248.4316 146.1719 245.9746 c147.7944 243.5205 148.9604 240.5762 149.6719 237.1445 c150.3813 233.7109 150.7368 229.8838 150.7368 225.6602 c150.7368 221.8584 150.3945 218.2148 149.7095 214.7305 Cf181.9302 197.3047 m180.002 196.8291 177.9736 196.5918 175.8438 196.5918 c173.1543 196.5918 170.6699 197.1211 168.3877 198.1758 c166.105 199.2324 164.1387 200.9092 162.4912 203.2061 c160.8423 205.502 159.562 208.4727 158.6489 212.1162 c157.7358 215.7598 157.2798 220.1416 157.2798 225.2637 c157.2798 230.543 157.7993 235.0059 158.8394 238.6494 c159.8779 242.293 161.2607 245.25 162.9858 247.5195 c164.7095 249.79 166.7007 251.4277 168.958 252.4316 c171.2144 253.4336 173.5352 253.9355 175.9204 253.9355 c178.3545 253.9355 180.3706 253.75 181.9683 253.3809 c183.5664 253.0117 184.9473 252.5625 186.1143 252.0352 C184.7456 246.6494 l183.73 247.2295 182.5396 247.6777 181.1689 247.9951 c179.7998 248.3125 178.2275 248.4707 176.4526 248.4707 c174.6768 248.4707 173.0029 248.0605 171.4307 247.2432 c169.8579 246.4238 168.4639 245.1045 167.2461 243.2832 c166.0288 241.4609 165.0649 239.0723 164.3555 236.1143 c163.644 233.1563 163.2896 229.541 163.2896 225.2637 c163.2896 217.5537 164.5571 211.7598 167.0947 207.8789 c169.6299 203.998 173.0029 202.0566 177.2129 202.0566 c178.937 202.0566 180.4844 202.3066 181.8545 202.8096 c183.2241 203.3105 184.3901 203.9043 185.3545 204.5918 C186.7231 199.6816 l185.4551 198.5723 183.8579 197.7803 181.9302 197.3047 Cf223.6235 215.8389 m223.6235 209.1328 222.3677 204.2871 219.8569 201.3047 c217.3467 198.3213 213.7822 196.8291 209.1675 196.8291 c203.79 196.8291 199.8726 198.2813 197.4131 201.1855 c194.9517 204.0898 193.7227 208.5527 193.7227 214.5723 C193.7227 252.9854 L199.4287 252.9854 L199.4287 217.6602 l199.4287 214.8096 199.6064 212.4053 199.9614 210.4531 c200.3159 208.498 200.8999 206.9141 201.7114 205.7012 c202.5225 204.4854 203.5376 203.6143 204.7549 203.0859 c205.9727 202.5586 207.4673 202.2949 209.2437 202.2949 c212.5908 202.2949 214.9116 203.5088 216.2056 205.9395 c217.4985 208.3652 218.1455 212.2744 218.1455 217.6602 C218.1455 252.9854 L223.6235 252.9854 L223.6235 215.8389 Lf224.4727 262.0469 m189.1128 262.0469 153.7524 262.0469 118.3926 262.0469 c116.9487 262.0469 116.9473 262.0518 116.9512 263.498 c116.957 265.6094 116.9736 267.7217 116.9658 269.834 c116.9648 270.0469 117.0166 270.2969 116.9844 270.5137 c116.959 270.6816 116.8848 270.8311 116.689 270.9268 c116.1787 271.1768 115.8096 270.7793 115.4521 270.4805 c113.7354 269.0479 112.02 267.6143 110.3037 266.1807 c109.1406 265.209 107.9775 264.2363 106.814 263.2656 c106.7793 263.2363 106.7417 263.2109 106.6992 263.1914 c106.6289 263.1572 106.5439 263.1387 106.4165 263.1631 c106.4937 263.2598 106.5698 263.3584 106.647 263.4561 c108.6953 266.0635 110.4971 268.9434 112.9185 271.1387 c117.4712 275.2695 120.7949 280.3584 124.6206 285.0449 c134.6211 297.2939 144.4468 309.6865 154.3394 322.0234 c159.8096 328.8457 165.2759 335.6719 170.7417 342.4971 c171.6069 343.5781 171.6133 343.5918 172.5107 342.4727 c180.7271 332.2266 188.9375 321.9766 197.1523 311.7295 c206.541 300.0186 215.9331 288.3096 225.3232 276.6006 c226.5181 275.1113 227.5742 273.4766 228.9385 272.1631 c231.6782 269.5244 233.7456 266.3486 236.2129 263.498 c236.2402 263.4668 236.2656 263.4326 236.2905 263.3994 c236.3447 263.3281 236.3975 263.2559 236.4517 263.1836 c236.418 263.1377 236.3853 263.0918 236.3516 263.0469 c236.3164 263.0762 236.2808 263.1055 236.2451 263.1348 c234.9268 264.2324 233.6089 265.3311 232.2905 266.4297 c230.7422 267.7188 229.1934 269.0088 227.6455 270.2988 c227.5161 270.4063 227.3975 270.5254 227.2666 270.6299 c226.9736 270.8633 226.6553 271.1035 226.2651 270.9629 c226.0337 270.8799 225.9497 270.7246 225.9238 270.5469 c225.8975 270.373 225.9263 270.1777 225.9263 270.0059 c225.9229 267.8613 225.9365 265.7158 225.9429 263.5703 c225.9478 262.0508 225.9468 262.0469 224.4727 262.0469 Cf241.1953 270.4668 m240.396 267.9189 239.6016 265.3691 238.8018 262.8223 c238.7153 262.5479 238.6904 262.1602 238.2886 262.2002 c237.9873 262.2305 238.0532 262.5508 238.0176 262.8066 c238.3804 264.915 238.7466 267.0527 239.1167 269.1895 c239.208 269.7207 239.3237 270.248 239.4028 270.7793 c239.4072 270.8076 239.4126 270.8359 239.416 270.8633 c239.4326 270.9795 239.459 271.0801 239.4946 271.168 c239.6162 271.4688 239.856 271.6152 240.2661 271.6445 c241.4731 271.7305 241.561 271.6348 241.1953 270.4668 Cf*U195.207 291.1289 m191.647 292.8027 188.8647 295.4336 186.4053 298.4316 c180.8599 305.1875 176.9619 312.8516 174.0361 321.0439 c173.1162 323.6191 172.3574 326.2422 171.7534 329.0449 c171.5737 328.8809 171.5044 328.8477 171.4888 328.7979 c171.4194 328.5811 171.3604 328.3604 171.3066 328.1387 c168.7388 317.542 164.2349 307.8555 157.5239 299.248 c155.0103 296.0244 152.1445 293.125 148.4043 291.2617 c147.2979 290.7109 147.291 290.7012 147.9253 289.6387 c150.3994 285.4912 151.0327 280.9082 151.0576 276.1982 c151.0713 273.5879 150.5645 271.0381 149.9648 268.502 c149.6099 267.0029 149.667 266.9873 151.228 266.9863 c164.7212 266.9863 178.2139 266.9863 191.7065 266.9863 c191.9678 266.9863 192.2285 266.9922 192.4888 266.9961 c193.0444 267.0049 193.2495 267.2832 193.1274 267.8203 c192.6479 269.9229 192.4814 272.0615 192.3403 274.209 c191.9771 279.751 192.644 285.0762 195.5454 289.9414 c195.9023 290.541 195.8428 290.8301 195.207 291.1289 CFUu0.510643 0.425421 0.425421 0.068147 k419.9492 241.1445 m418.9082 243.2285 417.4883 244.9189 415.6885 246.2129 c413.8887 247.5059 411.5664 248.1543 408.7266 248.1543 c408.2188 248.1543 407.6738 248.1543 407.0918 248.1543 c406.5078 248.1543 405.9375 248.127 405.3789 248.0742 c404.8203 248.0215 404.3008 247.9688 403.8203 247.916 c403.3369 247.8633 402.9453 247.8105 402.6406 247.7578 C402.6406 202.6113 l402.8418 202.5586 403.2109 202.5176 403.7441 202.4932 c404.2754 202.4658 404.834 202.4395 405.418 202.4141 c406 202.3867 406.5586 202.3604 407.0918 202.334 c407.624 202.3066 408.0156 202.2949 408.2705 202.2949 c411.0596 202.2949 413.3926 202.9277 415.2695 204.1953 c417.1465 205.4629 418.6299 207.166 419.7207 209.3037 c420.8105 211.4434 421.585 213.9238 422.041 216.75 c422.498 219.5742 422.7266 222.5703 422.7266 225.7393 c422.7266 228.5371 422.5225 231.2832 422.1172 233.9766 c421.7109 236.6689 420.9883 239.0576 419.9492 241.1445 CF*u1 D543.4053 270.875 m541.7646 282.5879 538.084 293.623 532.2422 303.9092 c524.4053 317.709 513.6934 328.8359 500.5947 337.7324 c493.3711 342.6367 485.4141 346.1104 477.5156 349.7012 c469.9863 353.125 463.0137 357.3008 457.2744 363.4248 c452.5293 368.4883 447.959 373.6934 443.4531 378.9639 c443.29 379.1543 443.1748 379.5127 442.8633 379.4141 c442.5664 379.3203 442.6289 378.9678 442.6035 378.709 c442.2939 375.7031 441.7402 372.7461 440.9541 369.8281 c439.2578 363.5293 435.9209 358.3867 430.625 354.4668 c425.3828 350.5869 419.8789 347.1602 414.0742 344.2031 c410.1631 342.2109 406.2148 340.2813 402.457 338.0107 c393.5547 332.6338 385.7236 325.9785 378.9033 318.123 c372.0742 310.2578 366.6367 301.543 362.8047 291.8545 c359.2764 282.9385 357.2598 273.6836 356.6865 264.1045 c356.2646 257.0566 356.5059 250.0469 357.6455 243.0771 c359.248 233.2715 362.3535 223.9746 367.0391 215.2041 c372.6016 204.7949 379.9121 195.7988 388.9023 188.1719 c397.2813 181.0635 406.6211 175.5586 416.8828 171.6152 c426.501 167.918 436.4619 165.7949 446.7422 165.3145 c452.5664 165.042 458.3887 165.2793 464.1875 166.0342 c474.4736 167.3701 484.3262 170.1699 493.6816 174.6445 c505.1035 180.1055 515.0391 187.5391 523.3027 197.1738 c528.8184 203.6055 533.2949 210.6914 536.7109 218.4355 c542.0234 230.4775 544.4639 243.1172 544.4121 257.3535 c544.4883 261.1582 544.084 266.0264 543.4053 270.875 CF0 D382.5898 262.2119 m382.1758 262.1172 382.1582 262.627 382.0635 262.9277 c381.251 265.5078 380.4609 268.0938 379.627 270.6641 c379.3887 271.3984 379.4395 271.793 380.3047 271.6191 c381.0957 271.7529 381.4063 271.3945 381.5254 270.6602 c381.9316 268.1572 382.3945 265.6631 382.8125 263.1621 c382.8691 262.832 383.0645 262.3203 382.5898 262.2119 Cf427.709 214.7305 m427.0254 211.2441 425.8711 208.1816 424.248 205.542 c422.624 202.9014 420.4814 200.79 417.8193 199.2061 c415.1563 197.6211 411.8203 196.8291 407.8145 196.8291 c407.1543 196.8291 406.3174 196.8438 405.3027 196.8691 c404.2881 196.8965 403.2363 196.9492 402.1465 197.0283 c401.0547 197.1074 400.041 197.1738 399.1025 197.2256 c398.1641 197.2793 397.4404 197.3584 396.9346 197.4639 C396.9346 252.9854 l397.7441 253.1445 398.6465 253.2627 399.6348 253.3418 c400.625 253.4199 401.625 253.4727 402.6406 253.5 c403.6543 253.5254 404.6563 253.5518 405.6465 253.5791 c406.6348 253.6055 407.5596 253.6191 408.4229 253.6191 c412.125 253.6191 415.2695 252.958 417.8574 251.6387 c420.4434 250.3184 422.5488 248.4316 424.1719 245.9746 c425.7949 243.5205 426.9609 240.5762 427.6719 237.1445 c428.3809 233.7109 428.7363 229.8838 428.7363 225.6602 c428.7363 221.8584 428.3945 218.2148 427.709 214.7305 Cf459.9297 197.3047 m458.002 196.8291 455.9736 196.5918 453.8438 196.5918 c451.1543 196.5918 448.6699 197.1211 446.3877 198.1758 c444.1055 199.2324 442.1387 200.9092 440.4912 203.2061 c438.8418 205.502 437.5625 208.4727 436.6484 212.1162 c435.7363 215.7598 435.2793 220.1416 435.2793 225.2637 c435.2793 230.543 435.7988 235.0059 436.8398 238.6494 c437.8779 242.293 439.2607 245.25 440.9863 247.5195 c442.709 249.79 444.7012 251.4277 446.958 252.4316 c449.2148 253.4336 451.5352 253.9355 453.9199 253.9355 c456.3545 253.9355 458.3711 253.75 459.9688 253.3809 c461.5664 253.0117 462.9473 252.5625 464.1143 252.0352 C462.7461 246.6494 l461.7305 247.2295 460.5391 247.6777 459.1689 247.9951 c457.7998 248.3125 456.2275 248.4707 454.4531 248.4707 c452.6768 248.4707 451.0029 248.0605 449.4307 247.2432 c447.8574 246.4238 446.4639 245.1045 445.2461 243.2832 c444.0293 241.4609 443.0645 239.0723 442.3555 236.1143 c441.6445 233.1563 441.2891 229.541 441.2891 225.2637 c441.2891 217.5537 442.5566 211.7598 445.0947 207.8789 c447.6299 203.998 451.0029 202.0566 455.2129 202.0566 c456.9375 202.0566 458.4844 202.3066 459.8545 202.8096 c461.2246 203.3105 462.3906 203.9043 463.3545 204.5918 C464.7227 199.6816 l463.4551 198.5723 461.8574 197.7803 459.9297 197.3047 Cf501.623 215.8389 m501.623 209.1328 500.3672 204.2871 497.8574 201.3047 c495.3467 198.3213 491.7822 196.8291 487.168 196.8291 c481.79 196.8291 477.873 198.2813 475.4131 201.1855 c472.9512 204.0898 471.7227 208.5527 471.7227 214.5723 C471.7227 252.9854 L477.4287 252.9854 L477.4287 217.6602 l477.4287 214.8096 477.6064 212.4053 477.9609 210.4531 c478.3164 208.498 478.9004 206.9141 479.7109 205.7012 c480.5225 204.4854 481.5371 203.6143 482.7549 203.0859 c483.9727 202.5586 485.4668 202.2949 487.2441 202.2949 c490.5908 202.2949 492.9121 203.5088 494.2051 205.9395 c495.498 208.3652 496.1455 212.2744 496.1455 217.6602 C496.1455 252.9854 L501.623 252.9854 L501.623 215.8389 Lf502.4727 262.0469 m467.1133 262.0469 431.752 262.0469 396.3926 262.0469 c394.9492 262.0469 394.9473 262.0518 394.9512 263.498 c394.957 265.6094 394.9736 267.7217 394.9658 269.834 c394.9648 270.0469 395.0166 270.2969 394.9844 270.5137 c394.959 270.6816 394.8848 270.8311 394.6895 270.9268 c394.1787 271.1768 393.8096 270.7793 393.4521 270.4805 c391.7354 269.0479 390.0195 267.6143 388.3037 266.1807 c387.1406 265.209 385.9775 264.2363 384.8145 263.2656 c384.7793 263.2363 384.7422 263.2109 384.6992 263.1914 c384.6289 263.1572 384.5439 263.1387 384.416 263.1631 c384.4941 263.2598 384.5703 263.3584 384.6465 263.4561 c386.6953 266.0635 388.4971 268.9434 390.918 271.1387 c395.4707 275.2695 398.7949 280.3584 402.6211 285.0449 c412.6211 297.2939 422.4473 309.6865 432.3398 322.0234 c437.8096 328.8457 443.2754 335.6719 448.7422 342.4971 c449.6074 343.5781 449.6133 343.5918 450.5107 342.4727 c458.7266 332.2266 466.9375 321.9766 475.1523 311.7295 c484.541 300.0186 493.9336 288.3096 503.3232 276.6006 c504.5176 275.1113 505.5742 273.4766 506.9385 272.1631 c509.6777 269.5244 511.7461 266.3486 514.2129 263.498 c514.2402 263.4668 514.2656 263.4326 514.291 263.3994 c514.3447 263.3281 514.3975 263.2559 514.4512 263.1836 c514.418 263.1377 514.3848 263.0918 514.3516 263.0469 c514.3164 263.0762 514.2813 263.1055 514.2451 263.1348 c512.9268 264.2324 511.6094 265.3311 510.291 266.4297 c508.7422 267.7188 507.1934 269.0088 505.6455 270.2988 c505.5156 270.4063 505.3975 270.5254 505.2666 270.6299 c504.9736 270.8633 504.6553 271.1035 504.2656 270.9629 c504.0332 270.8799 503.9492 270.7246 503.9238 270.5469 c503.8975 270.373 503.9258 270.1777 503.9258 270.0059 c503.9229 267.8613 503.9365 265.7158 503.9434 263.5703 c503.9473 262.0508 503.9473 262.0469 502.4727 262.0469 Cf519.1953 270.4668 m518.3965 267.9189 517.6016 265.3691 516.8018 262.8223 c516.7148 262.5479 516.6904 262.1602 516.2891 262.2002 c515.9873 262.2305 516.0527 262.5508 516.0176 262.8066 c516.3809 264.915 516.7461 267.0527 517.1172 269.1895 c517.208 269.7207 517.3242 270.248 517.4023 270.7793 c517.4072 270.8076 517.4121 270.8359 517.416 270.8633 c517.4326 270.9795 517.459 271.0801 517.4941 271.168 c517.6162 271.4688 517.8555 271.6152 518.2656 271.6445 c519.4727 271.7305 519.5605 271.6348 519.1953 270.4668 Cf*U473.207 291.1289 m469.6465 292.8027 466.8652 295.4336 464.4053 298.4316 c458.8594 305.1875 454.9619 312.8516 452.0361 321.0439 c451.1162 323.6191 450.3574 326.2422 449.7539 329.0449 c449.5742 328.8809 449.5039 328.8477 449.4883 328.7979 c449.4199 328.5811 449.3604 328.3604 449.3066 328.1387 c446.7383 317.542 442.2344 307.8555 435.5234 299.248 c433.0098 296.0244 430.1445 293.125 426.4043 291.2617 c425.2979 290.7109 425.291 290.7012 425.9258 289.6387 c428.3994 285.4912 429.0332 280.9082 429.0576 276.1982 c429.0713 273.5879 428.5645 271.0381 427.9648 268.502 c427.6094 267.0029 427.667 266.9873 429.2285 266.9863 c442.7207 266.9863 456.2139 266.9863 469.707 266.9863 c469.9678 266.9863 470.2285 266.9922 470.4883 266.9961 c471.0449 267.0049 471.25 267.2832 471.127 267.8203 c470.6484 269.9229 470.4814 272.0615 470.3398 274.209 c469.9766 279.751 470.6445 285.0762 473.5449 289.9414 c473.9023 290.541 473.8428 290.8301 473.207 291.1289 CFULB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF